GITHUB:

stages in GitHub
1. working area -> untracked files(not tracked in GitHub) 
2. Staging -> tracked files 
   once we execute git add command the untracked files will be tracked by the GitHub to commit
   git add . => to add all files
   git add "filename" => to add specific file
3. Local repository -> Now we can commit the files with commit message so that the files can be   
   stored or copied in out local(git commit -m "commit message")
4. Remote repository -> This is the stage where we push the code into GitHub to specific branch
   It'll push the code to central repository
   command: git push origin 

Git Commands:
git status
git add .
git commit -m "commit message"
git push origin master
 
git reset -> to move the repository back to the previous commit
git revert commit id -> to remove the changes made by the previous commit

Difference between Git reset and Git revert:
In git reset the it removes all the previous commits that are done before the git reset commit
where as in git revert it reverts the changes done in that particular commit and creates a new commit with reversed changes.

Commands:
changes revert
git push origin master
git reset commit id --hard
 
git log -> to view the logs
git log -2 -> to view the recents 2 logs
git show commit id -> shows the modified file details along with the changes 
git show --pretty="" --name-only commit id -> shows only the modified file name
git merge <branch1> -> to merge the current branch with branch1
git push origin --all -> to push all the branches
git branch -d <branch_name> -> to delete the branch
git push origin <tag_name> -> to push the tag version
git push origin --tag -> to push all tags

To merge:
Let's assume you are in develop branch and you want to merge your code from develop branch to main branch then first check out from the develop branch to master branch and execute git merge develop command and then execute commit and push commands to merge into master branch in github.

Use git diff develop to check the differences in main branch from develop branch

MERGE CONFLICT:
Merge conflict occurs when the branch you are trying to merge with does not have any differences and are modified at the same line of the file i.e., at the same part of the
file. To resolve this we do manual merge. Merge conflict won't occur when there is some difference in the files in the branches.

Difference between Branch and Tag:
Branch is mutable(can be changed)
Tag is immutable(cannot be changed)

GIT STASH:
git stash -> command used to save the changes temporarily that are not commited yet just like taking backup of the file.
Lets's say if you have started your development code and you need to swith to another work and wanted to save the changes temporarily and resume the work later, then you can use this command.This command will save the changes both tracked and untracked. When we use git stash the data is stored in the form of stashes in local repository.By default it will be stored in git/refs/stash file.

The data saved will be stored as stash@{index} like stash@{0}, stash@{1}....
git stash list -> this command is used to list all the stashes present

git stash apply -> this command is used to apply the stash and resume work that have been saved
git stash apply <stash_name> -> to open specific stash data

git stash drop ->once you push the changes and need to delete the data saved as stash we can use this command
git stash drop <stash_name> -> to delete the data of a specific stash
git stash clear -> to delete all the stashes

git stash pop -> this command is used to apply the latest stash and delete it from the stash list
git stash show -> this command is used to display the summary of operations performed on stash.

The main difference between stash and commit is that stash is used when ever you want to preserve data temporarily without commiting your code so that you can finish later and commit your code. Where as we use commit to store the data permanently in the repository it's just like a check point.





